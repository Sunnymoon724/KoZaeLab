using System;

public abstract class BaseClass : IDisposable
{
	private bool m_Disposed = false;

	protected BaseClass() => Initialize();
	~BaseClass() => Release(false);

	protected virtual void Initialize() { }

	protected virtual void Release(bool _disposing)
	{
		if(m_Disposed)
		{
			return;
		}

		if(_disposing)
		{
			// 관리 데이터 제거
			// 이벤트 핸들러 제거
		}

		// 비관리 데이터 제거

		m_Disposed = true;
	}

	public void Dispose()
	{
		Release(true);

		GC.SuppressFinalize(this);
	}
}

public class DerivedClass : BaseClass
{
	private bool m_Disposed = false;

	protected override void Release(bool _disposing)
	{
		if(m_Disposed)
		{
			return;
		}

		if(_disposing)
		{
			// 관리 데이터 제거
			// 이벤트 핸들러 제거
		}

		// 비관리 데이터 제거

		m_Disposed = true;

		base.Release(_disposing);
	}
}